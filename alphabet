const int SRCLK = 27;   // clock pin
const int RCLK = 25;  // latch pin
const int SER = 33;  // serial data in 
const int SRCLK2 = 15;
const int RCLK2 = 2;
const int SER2 = 4;

byte frame[8][8] = {0};
byte rows[8] = {0, 0, 0, 0, 0, 0, 0, 0};
byte rowRemap[8] = {0, 1, 2, 3, 5, 4, 7, 6};
byte remap[8][8] = {
  {7, 5, 4, 1, 0, 2, 3, 6},
  {7, 4, 3, 0, 1, 2, 5, 6},
  {6, 3, 2, 1, 0, 4, 5, 7},
  {3, 5, 2, 0, 1, 4, 6, 7},
  {5, 1, 0, 7, 6, 2, 4, 3},
  {6, 1, 7, 0, 4, 3, 5, 2},
  {4, 3, 5, 2, 6, 1, 7, 0},
  {0, 7, 1, 6, 2, 5, 4, 3}
};
byte layers = 0;
int layerRemap[8] = {3, 6, 7, 4, 5, 1, 2, 0};

void setup(){
  pinMode(SRCLK, OUTPUT);
  pinMode(RCLK, OUTPUT); 
  pinMode(SER, OUTPUT); 
  pinMode(SRCLK2, OUTPUT);
  pinMode(RCLK2, OUTPUT); 
  pinMode(SER2, OUTPUT); 
  Serial.begin(9600);
}

void render(int iterations){
  for(int i=0; i<iterations; i++)
  {
    renderFrame();
  }
}

void renderFrame() {
  for(int z=0; z<8; z++)
  {
    layers = 0;  // Turn off all layers
    updateShiftRegister(); //force all layers off to avoid ghosting

    //clear row data
    for(int i=0; i<8; i++)
    {
      rows[i] = 0;
    }

    //build row data for current layer
    for(int x=0; x<8; x++)
    {
      for(int y=0; y<8; y++)
      {
        if (frame[x][y] & (1 << z))
        {
          bitSet(rows[rowRemap[x]], remap[rowRemap[x]][y]);
        }
      }
    }

    //enable current layer
    layers = 0;
    bitSet(layers, layerRemap[z]);
    updateShiftRegister(); //updates row and layer together
    delayMicroseconds(20);  //delay for persistence, adjust as needed
  }
}

//takes coordinates and lights up that led
void set(int x, int y, int z){
  frame[x][y] |= (1 << z);
}

void clear(int x, int y, int z){
  frame[x][y] &= ~(1 << z);
}

void clearCube(){
  for(int x=0; x<8; x++)
  {
    for(int y=0; y<8; y++)
    {
      for(int z=0; z<8; z++)
      {
        clear(x,y,z);
      }
    }
  }
}

void a(int renderTime, int y)
{
  set(0,y,0);
  set(0,y,1);
  set(0,y,2);
  set(1,y,3);
  set(1,y,4);
  set(2,y,5);
  set(2,y,6);
  set(3,y,7);
  set(4,y,7);
  set(5,y,6);
  set(5,y,5);
  set(6,y,4);
  set(6,y,3);
  set(7,y,2);
  set(7,y,1);
  set(7,y,0);
  set(2,y,3);
  set(3,y,3);
  set(4,y,3);
  set(5,y,3);
  render(renderTime);
}
void b(int renderTime, int y)
{
  set(1,y,0);
  set(1,y,1);
  set(1,y,2);
  set(1,y,3);
  set(1,y,4);
  set(1,y,5);
  set(1,y,6);
  set(1,y,7);
  set(2,y,0);
  set(3,y,0);
  set(4,y,0);
  set(5,y,0);
  set(6,y,0);
  set(7,y,1);
  set(7,y,2);
  set(6,y,3);
  set(5,y,3);
  set(4,y,3);
  set(3,y,3);
  set(2,y,3);
  set(1,y,3);
  set(7,y,4);
  set(7,y,5);
  set(6,y,6);
  set(5,y,7);
  set(4,y,7);
  set(3,y,7);
  set(2,y,7);
  set(1,y,7);
  render(renderTime);
}
void c(int renderTime, int y)
{
  set(7,y,2);
  set(6,y,1);
  set(5,y,0);
  set(4,y,0);
  set(3,y,0);
  set(2,y,0);
  set(1,y,1);
  set(0,y,2);
  set(0,y,3);
  set(0,y,4);
  set(0,y,5);
  set(1,y,6);
  set(2,y,7);
  set(3,y,7);
  set(4,y,7);
  set(5,y,7);
  set(6,y,6);
  set(7,y,5);
  render(renderTime);
}
void d(int renderTime, int y)
{
  set(1,y,0);
  set(1,y,1);
  set(1,y,2);
  set(1,y,3);
  set(1,y,4);
  set(1,y,5);
  set(1,y,6);
  set(1,y,7);
  set(2,y,7);
  set(3,y,7);
  set(4,y,7);
  set(5,y,7);
  set(6,y,6);
  set(7,y,5);
  set(7,y,4);
  set(7,y,3);
  set(7,y,2);
  set(6,y,1);
  set(5,y,0);
  set(4,y,0);
  set(3,y,0);
  set(2,y,0);
  set(1,y,0);
  render(renderTime);
}
void e(int renderTime, int y)
{
  set(1,y,0);
  set(1,y,1);
  set(1,y,2);
  set(1,y,3);
  set(1,y,4);
  set(1,y,5);
  set(1,y,6);
  set(1,y,7);
  set(2,y,0);
  set(3,y,0);
  set(4,y,0);
  set(5,y,0);
  set(6,y,0);
  set(7,y,0);
  set(1,y,3);
  set(2,y,3);
  set(3,y,3);
  set(4,y,3);
  set(5,y,3);
  set(6,y,3);
  set(1,y,7);
  set(2,y,7);
  set(3,y,7);
  set(4,y,7);
  set(5,y,7);
  set(6,y,7);
  set(7,y,7);
  render(renderTime);
}
void f(int renderTime, int y)
{
  set(1,y,0);
  set(1,y,1);
  set(1,y,2);
  set(1,y,3);
  set(1,y,4);
  set(1,y,5);
  set(1,y,6);
  set(1,y,7);
  set(2,y,7);
  set(3,y,7);
  set(4,y,7);
  set(5,y,7);
  set(6,y,7);
  set(2,y,4);
  set(3,y,4);
  set(4,y,4);
  set(5,y,4);
  render(renderTime);
}

void loop() {
  f(500, 0);
}

void updateShiftRegister() {
  digitalWrite(RCLK, LOW);
  for(int i=0; i<8; i++)
  {
    shiftOut(SER, SRCLK, LSBFIRST, rows[i]);
  }
  digitalWrite(RCLK, HIGH);

  digitalWrite(RCLK2, LOW);
  shiftOut(SER2, SRCLK2, LSBFIRST, layers);
  digitalWrite(RCLK2, HIGH);
}
